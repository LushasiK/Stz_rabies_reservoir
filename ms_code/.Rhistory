table(combined_animal_cases$species)
combined_animal_cases$species <- factor(combined_animal_cases$species,
levels = c("other_wild", "jackal", "other_dom", "dog"))
own_labels <- c("Other wildlife", "Jackals", "Other domestic", "Dogs")
#**** RS: removed the Month from the date_labs to only show year ************#
date_labs <- sort(unique(animal$Year))
yr_breaks = seq(from=0, to=max(month_breaks), by=12)
## Test for adding lines to figure
head(combined_animal_cases,20)
# Create colour palette
# The alpha() can be used to change the transparency of a colour;
own_cols <- c(alpha("blue", 0.5), "blue", alpha("red", 0.5), "red")
# Produce plot
pdf("Figs/Cases_byspecies.pdf", height=8, width=16)
fig_1 <- ggplot(combined_animal_cases, aes(x = month, y = n, fill = species))  +
geom_bar(stat = "identity") +
scale_fill_manual(values = own_cols, name = "Species",
guide = guide_legend(reverse=TRUE),
labels = own_labels) +
theme_classic() +
theme(axis.title.x = element_text(size=16, face="plain"),
axis.title.y = element_text(size=16, face="plain"),
axis.text.x  = element_text(size = 16, face = "plain"),
axis.text.y = element_text(size = 16, face = "plain"),
axis.ticks.length = unit(.2, "cm"),
legend.text = element_text(size = 16, face = "plain"),
legend.title = element_text(size = 18, face = "plain"),
legend.position = c(0.9,0.7)) +
labs(title = "", y = "Monthly cases", x = "") +
scale_x_continuous(labels = date_labs, breaks = yr_breaks) +
geom_vline(xintercept=c(2, 18, 42, 56, 71), # months when vaccination campaigns were done
linetype="dotted", size=1)
fig_1
dev.off()
# HUMAN DATA -------------------------------------------------------------------
#
# Time series plot of human exposures  with bites due to either wildlife or domestic
# dogs as lines and death due to either wildlife and domestic dogs scalled as points/dots
# Exposed persons by species; exclude humans from the list of species
human_bites <- which(human$Attacking.species == "Human")
human <-human[-human_bites,]
dim(human)
# Group species into broader categories: Wildlife, domestic dogs and other domestic
# Add an extra column to data with the grouped species
# ************* *********** *********** *********** ************* *********** *********** ***********
# ************* TIP:  -(grep("Wildlife", human$Attacking.species)) *********** *********** ***********
# ************* ************ You can do this for Livestock too!!! *********** *********** ***********
#
# human$Grp_species <- human$Attacking.species
# levels(human$Grp_species) <- list (Dog = c("Domestic dog"),
#                                    Wildlife = c(human$Grp_species[grepl("Wildlife", human$Attacking.species)] <- "Wildlife"),
#                                    Domestic = c(human$Grp_species[grepl("Livestock|Cat",human$Attacking.species)] <- "Domestic"),
#                                    Unknown = ("Unknown"), Other = ("Other"))
#
# ****** Using Grep for wildlife and livestock generates warnings; invalid factor level, NA generated***********
# **** is there a way of getting rid of this warning, KH/RS?***************************
# *****************  *************************************   ********************  ***************
human$Grp_species <- human$Attacking.species
human$Grp_species <- ifelse(human$Grp_species=="Domestic dog", "Dog",
ifelse(human$Grp_species %in% c("Wildlife: Baboon","Wildlife: Banded mongoose","Wildlife: Bat eared fox",
"Wildlife: Civet", "Wildlife: Dwarf mongoose", "Wildlife: Genet",
"Wildlife: Honey badger","Wildlife: Hyena", "Wildlife: Jackal", "Wildlife: Leopard",
"Wildlife: Lion", "Wildlife: Monkey", "Wildlife: Serval","Wildlife: Striped hyena" ,
"Wildlife: Sykes monkey", "Wildlife: White tailed mongoose", "Wildlife: Wild cat", "Wildlife: Wildebeest",
"Wildlife"), "Wildlife",
ifelse(human$Grp_species %in% c("Cat", "Livestock: Cow", "Livestock: Donkey", "Livestock: Goat",
"Livestock: Pig", "Livestock: Sheep"), "Domestic",
ifelse(human$Grp_species=="Unknown", "Unknown", "Other"))))
# Subset for exposures and deaths
Deaths <- subset(human, human$Patient.outcome == "Died")
Exposures <- subset(human, human$Rabid == "Yes")
table(Deaths$Year)
table(Exposures$Year)
# Time series for the human data
Deaths_ts = hist(Deaths$month_n_death, breaks=month_breaks, plot=TRUE)$counts
Exp_ts = hist(Exposures$month_n, breaks=month_breaks, plot=TRUE)$counts
# Now the time series for the separate species for exposures and deaths
table(human$Grp_species)
table(Exposures$Grp_species)
table(Deaths$Grp_species)
# ************* TIP:  USE GREP on "domestic" and on "wildlife" *********** *********** ***********
Dom_hum_exp_ts = hist(Exposures[which(Exposures$Grp_species == "Dog"| Exposures$Grp_species == "Domestic"), "month_n"], breaks=month_breaks, plot=TRUE)$counts
Dom_hum_death_ts = hist(Deaths[which(Deaths$Grp_species == "Dog"| Deaths$Grp_species == "Domestic"), "month_n_death"], breaks=month_breaks, plot=TRUE)$counts
Wild_hum_exp_ts = hist(Exposures[which(Exposures$Grp_species == "Wildlife"), "month_n"], breaks=month_breaks, plot=TRUE)$counts
Wild_hum_death_ts = hist(Deaths[which(Deaths$Grp_species == "Wildlife"), "month_n_death"], breaks=month_breaks, plot=TRUE)$counts
# Combine ts into 1 dataframe
combined_human_exp <- data.frame(month = month_breaks[2:length(month_breaks)],
Dog = Dom_hum_exp_ts,
Wildlife = Wild_hum_exp_ts,
stringsAsFactors = FALSE)
combined_human_deaths <- data.frame(month = month_breaks[2:length(month_breaks)],
Dog = Dom_hum_death_ts,
Wildlife = Wild_hum_death_ts,
stringsAsFactors = FALSE)
# Transform from wide to long format
combined_human_exp_m <- melt(combined_human_exp, id.vars="month")
combined_human_deaths_m <- melt(combined_human_deaths, id.vars="month")
# Change columns for ease
colnames(combined_human_exp_m) <- c("month", "species", "n")
colnames(combined_human_deaths_m) <- c("month", "species", "n")
#***** RS: We will be adding the points for human deaths as scaled points. This
#***** means that they will need to be positioned at a set point on the y-axis.
#***** In ggplot2, the easiest way to do this is to set a column as the number,
#***** and referenced this in the plotting code: aes(y=y_value)
# Add y-axis value
combined_human_deaths_m$y_value <- ifelse(combined_human_deaths_m$species=="Dog", -2, -4)
# FIGURE 2  --------------------------------------------------------------------
# Plot to show the exposures per year per species and human deaths per year per species
pdf("Figs/exposures_deaths_byspecies.pdf", height=6, width=12)
fig_2 <- ggplot() +
geom_line(data=combined_human_exp_m, aes(x=month, y=n, group=species, color=species)) +
geom_point(data=combined_human_deaths_m[which(combined_human_deaths_m$n>0),],
aes(x=month, y=y_value, group=species, color=species, size=n)) +
scale_color_manual(name="Species", values=c("red", "blue"), breaks=c("Dog", "Wildlife")) +
#***** RS: This is how we control the variable size of the points
scale_size(name="Deaths", breaks=sort(unique(combined_human_deaths_m$n[which(combined_human_deaths_m$n>0)]))) +
scale_x_continuous(labels = date_labs, breaks = yr_breaks) +
labs(y = "Monthly exposures and deaths", x = "", title= "") +
geom_hline(yintercept=0, linetype="dashed", size=0.2) + # 0
theme_classic() +
theme(axis.text.x  = element_text(size = 16, face = "plain"),
axis.title.x = element_text(size=16, face="plain"),
axis.text.y = element_text(size = 16, face = "plain"),
axis.title.y = element_text(size=16, face="plain"),
axis.ticks.length = unit(.2, "cm"),
legend.text = element_text(size = 14, face = "plain"),
legend.title = element_text(size = 16, face = "plain"),
legend.position = c(0.8,0.7))
fig_2
dev.off()
# ******************************************************************************
# FIGURE 3 ---------------------------------------------------------------------
# A plot for the proportional of exposures per species per year
# Look at exposures per year
Total_exp_per_year <- as.data.frame(table(human$Year))
colnames(Total_exp_per_year) <- c("Year", "Freq")
#View(Total_exp_per_year)
# Look at the number of exposures by species
Per_spec <- as.data.frame(table(human$Attacking.species))
colnames(Per_spec) <- c("Species", "Exposures")
Per_spec["proportion"] <- Per_spec$`Exposures`/(sum(Per_spec$`Exposures`))
#View(Per_spec)
# Look at species per year and the number of exposures
Per_spec_year <- as.data.frame(table(human$Year, human$Attacking.species))
colnames(Per_spec_year) <- c("Year", "Species", "Exposures")
df_SY <- dcast(Per_spec_year, Year ~ Species)
# View(df_SY)
table(human$Grp_species)
human <- human[-which(human$Grp_species=="Domestic"),] # REMOVE DOMESTIC - YOU DO NOT PLOT DOMESTIC IN OTHER PLOTS, ONLY DOGS VS. WILDLIFE!
human$Grp_species <- factor(human$Grp_species, levels=c("Dog", "Wildlife"))
SPY <- as.data.frame(table(human$Grp_species, human$Year)) # Species per year
colnames(SPY) <- c("Species", "Year", "Spec_count")
# Calculate the proportion of cases;
Yly <- SPY[,2:3]
Yly <- aggregate(.~Year, Yly, FUN = sum)
colnames(Yly) <- c("Year", "Total")
SPY2 <- merge(SPY, Yly, by = "Year")
SPY2["Prop_of_cases"] <- round(SPY2[,"Spec_count"]/SPY2[,"Total"], 1)
#' The Plot
pdf("Figs/proportional_Exposures_species_year.pdf", height=8, width=8)
fig_3 <- ggplot() +
geom_line(data=SPY2, aes(x=Year, y=Prop_of_cases, group=Species, color=Species), size=1) +
scale_color_manual(name="Species", values=c("red", "blue"), breaks=c("Dog", "Wildlife")) +
labs(y = "Proportion", x = "", title = "") + #, title = "Proportion of human exposures per species per year") +
theme_classic() +
theme(axis.text.x  = element_text(size = 12, face = "plain"),
axis.text.y = element_text(size = 12, face = "plain"),
legend.position = "none",
axis.ticks.length = unit(.2, "cm"))
fig_3
dev.off()
# ************* *********** *********** *********** ************* *********** *********** ***********
# Create an insert plot:
# The proportional of exposures (Figure 3) by species into figure 2, for exposures and deaths by species
inset.plot <- fig_3
inset.plot # plot to be inserted into another plot
pdf("Figs/plot.with.insert.pdf", height=8, width=16)
plot.with.inset <-
ggdraw() +
draw_plot(fig_2) +
#***** RS: The inset plot has been moved slightly to the right  by increasing
#***** the x value from 0.25
draw_plot(inset.plot, x = 0.4, y = .5, width = .35, height = .45) +
draw_plot_label(label="C", x=0.37, y=0.95, size = 28) # This line adds a label to the inset plot; this might make it easier to reference in the legend/caption
plot.with.inset
dev.off()
# NOW, combine plot with an inset with figure 1, a plot for cases by species
pdf("Figs/Figure_3_Timeseries_casesBySpecies.pdf", height=10, width=14)
plot_grid(plot.with.inset,
fig_1,
ncol=1,
labels=LETTERS[1:2],
align=c("l","r"),
label_size = 24)
dev.off()
animal$Uncertainty
k <- animal$Uncertainty
nearby = length(na.omit(uncertainty=="nearby"))
nearby = length(na.omit(Uncertainty=="nearby"))
nearby = length(na.omit(animal$Uncertainty=="nearby"))
nearby = length(animal$Uncertainty=="nearby")
nearyby <- length(which(na.omit(animal$Uncertainity=="nearby")))
nearyby <- length(which(animal$Uncertainity=="nearby"))
length(which(animal$Uncertainty=="nearby")) #
k <- animal$Uncertainty
k <- animal$Uncertainty;k
length(which(animal$Uncertainty=="far.away"))
names(animal$Uncertainty)
length(which(animal$Uncertainty=="far_away"))
length(which(animal$Uncertainty=="far away"))
length(which(animal$Uncertainty=="at home"))
length(which(animal$Uncertainty=="on the farm"))
121+113+28+173
length(which(animal$Uncertainty=="nearby")) #
length(which(animal$Uncertainty=="far away"))
length(which(animal$Uncertainty=="at home"))
length(which(animal$Uncertainty=="on the farm"))
# Load data
animal <- read.csv ("output/animal_cases.csv")
human <- read.csv("output/human_bites.csv")
vacc <- read.csv("output/vcMat_Vill_Round_2010-01-01_to_2017-12-31_withAgg.csv")
View(animal)
length(animal)
nrow(animal)
zero_twoKm <-length(which(animal$Uncertainty=="nearby"))/nrow(animal)*100
zero_2Km <-length(which(animal$Uncertainty=="nearby"))/nrow(animal)*100;zero_2Km
two_5km <-length(which(animal$Uncertainty=="on the farm"))/nrow(animal);two_5km
furthest_location <-length(which(animal$Uncertainty=="far away")) /nrow(animal);furthest_location
zero_2Km<-length(which(animal$Uncertainty=="nearby"))/nrow(animal)*100;zero_2Km
two_5km <-length(which(animal$Uncertainty=="on the farm"))/nrow(animal)*100;two_5km
furthest_location <-length(which(animal$Uncertainty=="far away")) /nrow(animal)*100;furthest_location
precise_location <- 100-sum(zero_2Km,two_5km,furthest_location);precise_location
# Calculating proportion of cases with uncertanities
zero_2Km<-length(which(animal$Uncertainty=="nearby"))/nrow(animal)*100;zero_2Km
two_5km <-length(which(animal$Uncertainty=="on the farm"))/nrow(animal)*100;two_5km
furthest_location <-length(which(animal$Uncertainty=="far away")) /nrow(animal)*100;furthest_location
# Calculating proportion of cases with uncertanities
zero_2Km<-length(which(animal$Uncertainty=="nearby"))/nrow(animal)*100;zero_2Km
two_5km <-length(which(animal$Uncertainty=="on the farm"))/nrow(animal)*100;two_5km
furthest_location <-length(which(animal$Uncertainty=="far away")) /nrow(animal)*100;furthest_location
precise_location <- 100-sum(zero_2Km,two_5km,furthest_location);precise_location
setwd("~/GitHub/Stz_reservoirs")
#-----------------------------------------
# Author: Kennedy Lushasi
# Title: Incidence plots of rabies cases by species, and human exposures and deaths by species.
# Also explore how the number of animal rabies cases varied with vaccination campaigns.
# The animal rabies cases plot, shows the interval of when vaccination campaigns were done
#-------------------------------------------
rm(list = ls())
# Load libraries
library(tidyverse) # Note tidyverse already includes: tidyr, dplyr, lubridate, ggplot2, tibble
library(reshape2)
library(lattice)
library(grid)
library(latticeExtra)
library(gridExtra)
library(ggplotify)
library(cowplot)
library(ggpubr)
library(patchwork)
library(gridBase)
library(egg)
library(ggpmisc)
# Load data
animal <- read.csv ("output/animal_cases.csv")
human <- read.csv("output/human_bites.csv")
vacc <- read.csv("output/vcMat_Vill_Round_2010-01-01_to_2017-12-31_withAgg.csv")
# ANIMAL DATA ------------------------------------------------------------------
# Look at number of cases in each species in each subset
Animal_cases <- as.data.frame(table(animal$Species))
colnames(Animal_cases) <- c("Species", "N_cases")
Animal_cases$percentage <- round((Animal_cases$N_cases/sum(Animal_cases$N_cases)*100), digits=1)
# Calculating proportion of cases with location uncertanities
zero_2Km<-length(which(animal$Uncertainty=="nearby"))/nrow(animal)*100;zero_2Km
two_5km <-length(which(animal$Uncertainty=="on the farm"))/nrow(animal)*100;two_5km
furthest_location <-length(which(animal$Uncertainty=="far away")) /nrow(animal)*100;furthest_location
precise_location <- 100-sum(zero_2Km,two_5km,furthest_location);precise_location
setwd("~/GitHub/Stz_reservoirs")
#--------------------------------------------------------------------------
# Author: Kennedy Lushasi
# Create a table  of animal rabies cases detected and human rabies exposures & deaths by biting species
#----------------------------------------------------------------------------
rm(list=ls())
library(dplyr)
library(rgdal)
# Import the data
# Human contact tracing data: bites/victims from 2011 to date
humans <- read.csv("output/human_bites.csv", stringsAsFactors = FALSE)
table(humans$Rabid, useNA = "always")
# Animal contact tracing data
animals <- read.csv("output/animal_cases.csv", stringsAsFactors = FALSE)
table(animals$Suspect, useNA = "always") # only suspected animals
# Suspect animal cases
unique_sus_cases <- animals %>%
select(Species, Suspect, ID) %>%
distinct() %>%
group_by(Species) %>%
summarise(n_cases=n())
# Suspect biting animals
unique_sus_bitinganimals <- humans %>%
select(Attacking.species, Rabid, Biter.ID) %>%
distinct() %>%
group_by(Attacking.species) %>%
summarise(n_biters=n())
# Exposed persons by species, exclude humans from the list of species
humans <- subset(humans, humans$Attacking.species == "Wildlife: Honey badger" |humans$Attacking.species == "Wildlife: Hyena" |
humans$Attacking.species == "Wildlife: Jackal" |humans$Attacking.species == "Wildlife: Leopard" |
humans$Attacking.species =="Domestic dog"|humans$Attacking.species=="Cat")
exposures <- humans %>%
filter(Rabid == "Yes") %>%
group_by(Attacking.species) %>%
summarise(n_exp=n()) %>%
mutate(p_exp=NA)
# Deaths from rabid animals by species
deaths <- humans %>%
filter(Patient.outcome == "Died") %>%
group_by(Attacking.species) %>%
summarise(n_deaths=n()) %>%
mutate(p_death=NA)
df <- merge(unique_sus_cases, unique_sus_bitinganimals, by.x="Species", by.y="Attacking.species", all=TRUE)
df <- subset(df, df$Species == "Cat" |df$Species == "Domestic dog" |
df$Species == "Wildlife: Honey badger" |df$Species == "Wildlife: Hyena" |
df$Species =="Wildlife: Jackal"|df$Species=="Wildlife: Leopard") # Exclude humans and unknowns from species
df$p_cases <- round(df$n_cases/nrow(animals), digits = 2)
bites <- merge(df, exposures, by.x="Species", by.y="Attacking.species", all=TRUE)
bites <- merge(bites, deaths, by.x="Species", by.y="Attacking.species", all=TRUE)
bites[is.na(bites)] <- 0
bites$p_exp <- round((bites$n_exp/sum(bites$n_exp))*100, digits=1)
bites$p_death <- round((bites$n_deaths/sum(bites$n_deaths))*100, digits=1)
# Remove "Livestock: " and "Wildlife: " from wildlife species
bites$Species <- gsub("Domestic d", "D", bites$Species)
bites$Species <- gsub("Livestock: ", "", bites$Species)
bites$Species <- gsub("Wildlife: ", "", bites$Species)
summary_table <- data.frame(Animal_type = ifelse(grepl("Wildlife", bites$Species), "Wildlife",
ifelse(bites$Species== "Dog", "Domestic animals",
ifelse(bites$Species == "Cat","Domestic animals","Others"))),
Species=bites$Species,
Cases=paste0(bites$n_cases, " (", df$p_cases*100,")"),
Exposures=paste0(bites$n_exp, " (", bites$p_exp, ")"),
Deaths=paste0(bites$n_deaths, " (", bites$p_death, ")"),
stringsAsFactors = FALSE)
# Attach row at bottom for totals
summary_table <- rbind(summary_table,
data.frame(Animal_type="",
Species="",
Cases=sum(bites$n_cases),
Exposures=sum(bites$n_exp),
Deaths=sum(bites$n_deaths),
stringsAsFactors = FALSE))
# name columns
colnames(summary_table) <- c("Type", "Species",
"Probable rabies cases (%)",
"Probable rabies exposures by species (%)",
"Deaths due to rabies by species (%)")
write.csv(summary_table, "output/summary_table.csv", row.names=FALSE)
setwd("~/GitHub/Stz_reservoirs")
##----------------------------------------------------------
# Author:  Kennedy Lushasi
# This script produces a table of the annual vaccination coverage
# for each district of Lindi and Mtwara regions, with the mean, standard deviation,
# median and range of each campaign
##---------------------------------------------------------
# import data
rm(list=ls())
library(rgdal)
require(tidyverse)
library(data.table)
library(dplyr)
options(stringsAsFactors=F)
## Vaccination coverage
vacc <- read.csv("output/vcMat_Dist_Round_2010-01-01_to_2017-12-31_withAgg.csv", row.names = 1,header=F)
nrow(vacc)
colnames(vacc) <- c("1st campaign", "2nd Campaign","3rd Campaign",
"4th Campaign","5th Campaign")
setDT(vacc, keep.rownames = "District") # add column name for the districts
View(vacc)
# select districts of interest (Lindi and Mtwara regions)
vaccDist <- subset(vacc, vacc$District == "Kilwa" |vacc$District == "Lindi Urban" |vacc$District == "Mtwara Urban" |vacc$District == "Ruangwa" |
vacc$District =="Liwale"|vacc$District=="Nachingwea"|vacc$District =="Masasi"|
vacc$District=="Nanyumbu"|vacc$District=="Tandahimba"|vacc$District == "Lindi Rural" |
vacc$District =="Mtwara Rural"|vacc$District=="Newala"|vacc$District =="Masasi Township Authority")
table(vaccDist$District)
names(vaccDist)
vaccDist$`1st campaign` <- vaccDist$`1st campaign`*100
vaccDist $`2nd Campaign`<- vaccDist$`2nd Campaign`*100
vaccDist$`3rd Campaign` <- vaccDist$`3rd Campaign`*100
vaccDist$`4th Campaign` <- vaccDist $`4th Campaign`*100
vaccDist$`5th Campaign` <- vaccDist $`5th Campaign`*100
# vacc11 <- round((vaccDist$`1st campaign (2011)`) *100, digits=1)
# vacc12 <- round((vaccDist$`2rd campaign (2012)`) *100, digits=1)
# vacc13 <- round((vaccDist$`3rd campaign (2013)`) *100, digits=1)
# vacc14 <- round((vaccDist$`4th campaign (2014)`) *100, digits=1)
# vacc16 <- round((vaccDist$`5th campaign (2016)`) *100, digits=1)
# for 2011
m11 <- mean(vaccDist$`1st campaign`);m11
s11 <- sd(vaccDist$`1st campaign`);s11
r11 <- range(vaccDist$`1st campaign`);r11
med <- median(vaccDist$`1st campaign`);med
# for 2012
m12 <- mean(vaccDist$`2nd Campaign`);m12
s12 <- sd(vaccDist$`2nd Campaign`);s12
r12 <- range(vaccDist$`2nd Campaign`);r12
med12 <- median(vaccDist$`2nd Campaign`);med12
# for 2013
m13 <- mean(vaccDist$`3rd Campaign`);m13
s13 <- sd(vaccDist$`3rd Campaign`);s13
r13 <- range(vaccDist$`3rd Campaign`);r13
med13 <- median(vaccDist$`3rd Campaign`);med13
# for 2014
m14 <- mean(vaccDist$`4th Campaign`);m14
s14 <- sd(vaccDist$`4th Campaign`);s14
r14 <- range(vaccDist$`4th Campaign`);r14
med14 <- median(vaccDist$`4th Campaign`);med14
# for 2016
m16 <- mean(vaccDist$`5th Campaign`); m16
s16 <- sd(vaccDist$`5th Campaign`); s16
r16 <- range(vaccDist$`5th Campaign`); r16
med16 <- median(vaccDist$`5th Campaign`); med16
# add mean, sd,median and range as a row
newdata <- vaccDist %>% add_row(District = "Mean", "1st campaign" = m11,
"2nd Campaign"= m12, "3rd Campaign" = m13,
"4th Campaign" = m14, "5th Campaign" = m16) %>%
add_row(District = "SD", "1st campaign" = s11,
"2nd Campaign"= s12, "3rd Campaign" = s13,
"4th Campaign" = s14, "5th Campaign" = s16) %>%
add_row(District = "Median", "1st campaign" = med,
"2nd Campaign"= med12, "3rd Campaign" = med13,
"4th Campaign" = med14, "5th Campaign" = med16)%>%
add_row(District ="range", "1st campaign"= r11,
"2nd Campaign"= r12, "3rd Campaign" = r13,
"4th Campaign" = r14, "5th Campaign" = r16)
# now save newdata as a csv dataframe
write.csv(newdata, "output/Dist_Vacc_Coverage_table.csv", row.names=FALSE)
setwd("~/GitHub/Stz_reservoirs/ms_code")
# Load libraries
library(tidyverse)
library(reshape2)
library(lattice)
library(grid)
library(latticeExtra)
library(gridExtra)
library(ggplotify)
install.packages("ggplotify")
library(gridExtra)
library(ggplotify)
library(cowplot)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
library(patchwork)
library(gridBase)
install.packages("gridBase")
library(gridBase)
library(egg)
install.packages("egg")
library(egg)
library(ggpmisc)
# Load data
animal <- read.csv ("ms_data/animal_cases.csv")
setwd("~/GitHub/Stz_reservoirs/ms_code")
# Load data
animal <- read.csv ("ms_data/animal_cases.csv")
human <- read.csv("ms_data/human_bites.csv")
vacc <- read.csv("ms_data/vcMat_Vill_Round_2010-01-01_to_2017-12-31_withAgg.csv")
# Load data
animal <- read.csv ("output/animal_cases.csv")
# Load data
animal <- read.csv ("output/animal_cases.csv")
# Load data
animal <- read.csv ("ms_data/animal_cases.csv")
human <- read.csv("ms_data/human_bites.csv")
vacc <- read.csv("ms_data/vcMat_Vill_Round_2010-01-01_to_2017-12-31_withAgg.csv")
message(paste0("Number of human exposures to probable rabid animals: ", nrow(human)))
message(paste0("Number of exposures that resulted in death: ", length(which(human$Patient.outcome=="Died")),
" (", round((length(which(human$Patient.outcome=="Died"))/nrow(human))*100, digits=1), "%)"))
message(paste0("Number of probable animal rabies cases: ", nrow(animal)))
message(paste0("Number of domestic cases: ", length(which(animal$Species %in% c("Domestic dog", "Cat"))),
" (", round((length(which(animal$Species %in% c("Domestic dog", "Cat")))/nrow(animal))*100, digits=1), "%)"))
message(paste0("Number of wildlife cases: ", length(which(grepl("Wildlife", animal$Species))),
" (", round((length(which(grepl("Wildlife", animal$Species)))/nrow(animal))*100, digits=1), "%)"))
message(paste0("Number of lab confirmed cases: ", length(which(animal$Lateral.flow.test=="Positive"))))
message(paste0("Number of exposures due to domestic dogs: ", length(which(human$Attacking.species=="Domestic dog")),
"/", nrow(human), " (", round((length(which(human$Attacking.species=="Domestic dog"))/nrow(human))*100, digits=1), "%)"))
message(paste0("Number of exposures due to jackals: ", length(which(human$Attacking.species=="Wildlife: Jackal")),
"/", nrow(human), " (", round((length(which(human$Attacking.species=="Wildlife: Jackal"))/nrow(human))*100, digits=1), "%)"))
# Load libraries
library(tidyverse)
library(reshape2)
library(lattice)
library(grid)
library(latticeExtra)
library(gridExtra)
library(ggplotify)
library(cowplot)
library(ggpubr)
library(patchwork)
library(gridBase)
library(egg)
library(ggpmisc)
# Set options
options(stringsAsFactors = F)
# Load functions
source("ms_R/fig_label.R")
# Load data
animal_cases_map <- read.csv("ms_data/animal_cases_map.csv")
animal_cases_ts <- read.csv ("ms_data/combined_animal_cases_ts.csv")
human_exposures_ts <- read.csv("ms_data/combined_human_exposures_ts.csv")
human_deaths_ts <- read.csv("ms_data/combined_human_deaths_ts.csv")
human_exposures_prop <- read.csv("ms_data/human_exposures_prop.csv")
STzGrid <- raster("ms_data/gis/STzGrid4kmsq.grd")
cellData <- read.csv("ms_data/STzCellData_4kmsq.csv")
dogPopMat <- as.matrix(read.csv("ms_data/dog_population_year.csv", header=FALSE))
